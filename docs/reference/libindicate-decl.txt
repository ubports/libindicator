<MACRO>
<NAME>INDICATE_TYPE_INDICATOR</NAME>
#define INDICATE_TYPE_INDICATOR (indicate_indicator_get_type ())
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR</NAME>
#define INDICATE_INDICATOR(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), INDICATE_TYPE_INDICATOR, IndicateIndicator))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_INDICATOR</NAME>
#define INDICATE_IS_INDICATOR(object) (G_TYPE_CHECK_INSTANCE_TYPE((object), INDICATE_TYPE_INDICATOR))
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_CLASS</NAME>
#define INDICATE_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), INDICATE_TYPE_INDICATOR, IndicateIndicatorClass))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_INDICATOR_CLASS</NAME>
#define INDICATE_IS_INDICATOR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), INDICATE_TYPE_INDICATOR))
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_GET_CLASS</NAME>
#define INDICATE_INDICATOR_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS((object), INDICATE_TYPE_INDICATOR, IndicateIndicatorClass))
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_SIGNAL_HIDE</NAME>
#define INDICATE_INDICATOR_SIGNAL_HIDE  "hide"
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_SIGNAL_SHOW</NAME>
#define INDICATE_INDICATOR_SIGNAL_SHOW  "show"
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_SIGNAL_DISPLAY</NAME>
#define INDICATE_INDICATOR_SIGNAL_DISPLAY  "user-display"
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_SIGNAL_MODIFIED</NAME>
#define INDICATE_INDICATOR_SIGNAL_MODIFIED  "modified"
</MACRO>
<STRUCT>
<NAME>IndicateIndicator</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateIndicatorClass</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateIndicator</NAME>
struct _IndicateIndicator {
	GObject parent;
};

</STRUCT>
<STRUCT>
<NAME>IndicateIndicatorClass</NAME>
struct _IndicateIndicatorClass {
	GObjectClass parent_class;

	void (*hide) (IndicateIndicator * indicator, gpointer data);
	void (*show) (IndicateIndicator * indicator, gpointer data);
	void (*user_display) (IndicateIndicator * indicator, gpointer data);
	void (*modified) (IndicateIndicator * indicator, gchar * property, gpointer data);

	const gchar * (*get_type) (IndicateIndicator * indicator);
	void (*set_property) (IndicateIndicator * indicator, const gchar * key, const gchar * data);
	const gchar * (*get_property) (IndicateIndicator * indicator, const gchar * key);
	GPtrArray * (*list_properties) (IndicateIndicator * indicator);
};

</STRUCT>
<FUNCTION>
<NAME>indicate_indicator_get_type</NAME>
<RETURNS>GType </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_new</NAME>
<RETURNS>IndicateIndicator *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_set_property</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator, const gchar * property_name, const gchar * property_value
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_show</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_hide</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_is_visible</NAME>
<RETURNS>gboolean </RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_get_id</NAME>
<RETURNS>guint </RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_get_indicator_type</NAME>
<RETURNS>const gchar *</RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_user_display</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_set_property</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator, const gchar * key, const gchar * data
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_set_property_icon</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator, const gchar * key, const GdkPixbuf * data
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_set_property_time</NAME>
<RETURNS>void </RETURNS>
IndicateIndicator * indicator, const gchar * key, GTimeVal * time
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_get_property</NAME>
<RETURNS>const gchar *</RETURNS>
IndicateIndicator * indicator, const gchar * key
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_list_properties</NAME>
<RETURNS>GPtrArray *</RETURNS>
IndicateIndicator * indicator
</FUNCTION>
<MACRO>
<NAME>INDICATE_TYPE_LISTENER</NAME>
#define INDICATE_TYPE_LISTENER (indicate_listener_get_type ())
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER</NAME>
#define INDICATE_LISTENER(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), INDICATE_TYPE_LISTENER, IndicateListener))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_LISTENER</NAME>
#define INDICATE_IS_LISTENER(object) (G_TYPE_CHECK_INSTANCE_TYPE((object), INDICATE_TYPE_LISTENER))
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_CLASS</NAME>
#define INDICATE_LISTENER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), INDICATE_TYPE_LISTENER, IndicateListenerClass))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_LISTENER_CLASS</NAME>
#define INDICATE_IS_LISTENER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), INDICATE_TYPE_LISTENER))
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_GET_CLASS</NAME>
#define INDICATE_LISTENER_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS((object), INDICATE_TYPE_LISTENER, IndicateListenerClass))
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SIGNAL_INDICATOR_ADDED</NAME>
#define INDICATE_LISTENER_SIGNAL_INDICATOR_ADDED       "indicator-added"
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SIGNAL_INDICATOR_REMOVED</NAME>
#define INDICATE_LISTENER_SIGNAL_INDICATOR_REMOVED     "indicator-removed"
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SIGNAL_INDICATOR_MODIFIED</NAME>
#define INDICATE_LISTENER_SIGNAL_INDICATOR_MODIFIED    "indicator-modified"
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SIGNAL_SERVER_ADDED</NAME>
#define INDICATE_LISTENER_SIGNAL_SERVER_ADDED          "server-added"
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SIGNAL_SERVER_REMOVED</NAME>
#define INDICATE_LISTENER_SIGNAL_SERVER_REMOVED        "server-removed"
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_SERVER_DBUS_NAME</NAME>
#define INDICATE_LISTENER_SERVER_DBUS_NAME(server)   ((gchar *)server)
</MACRO>
<MACRO>
<NAME>INDICATE_LISTENER_INDICATOR_ID</NAME>
#define INDICATE_LISTENER_INDICATOR_ID(indicator)    (GPOINTER_TO_UINT(indicator))
</MACRO>
<TYPEDEF>
<NAME>IndicateListenerServer</NAME>
typedef gchar IndicateListenerServer;
</TYPEDEF>
<TYPEDEF>
<NAME>IndicateListenerIndicator</NAME>
typedef guint IndicateListenerIndicator;
</TYPEDEF>
<STRUCT>
<NAME>IndicateListener</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateListener</NAME>
struct _IndicateListener {
	GObject parent;
};

</STRUCT>
<STRUCT>
<NAME>IndicateListenerClass</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateListenerClass</NAME>
struct _IndicateListenerClass {
	GObjectClass parent;

	/* Signals */
	void (* indicator_added) (IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * type);
	void (* indicator_removed) (IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * type);
	void (* indicator_modified) (IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * type, gchar * property);

	void (* server_added) (IndicateListenerServer * server, gchar * type);
	void (* server_removed) (IndicateListenerServer * server, gchar * type);
};

</STRUCT>
<FUNCTION>
<NAME>indicate_listener_get_type</NAME>
<RETURNS>GType </RETURNS>
void
</FUNCTION>
<USER_FUNCTION>
<NAME>indicate_listener_get_property_cb</NAME>
<RETURNS>void </RETURNS>
IndicateListener * listener, IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * property, gchar * propertydata, gpointer data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>indicate_listener_get_property_time_cb</NAME>
<RETURNS>void </RETURNS>
IndicateListener * listener, IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * property, GTimeVal * propertydata, gpointer data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>indicate_listener_get_property_icon_cb</NAME>
<RETURNS>void </RETURNS>
IndicateListener * listener, IndicateListenerServer * server, IndicateListenerIndicator * indicator, gchar * property, GdkPixbuf * propertydata, gpointer data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>indicate_listener_get_server_property_cb</NAME>
<RETURNS>void </RETURNS>
IndicateListener * listener, IndicateListenerServer * server, gchar * value, gpointer data
</USER_FUNCTION>
<FUNCTION>
<NAME>indicate_listener_new</NAME>
<RETURNS>IndicateListener *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_ref_default</NAME>
<RETURNS>IndicateListener *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_get_property</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,IndicateListenerIndicator * indicator,gchar * property,indicate_listener_get_property_cb callback,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_get_property_time</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,IndicateListenerIndicator * indicator,gchar * property,indicate_listener_get_property_time_cb callback,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_get_property_icon</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,IndicateListenerIndicator * indicator,gchar * property,indicate_listener_get_property_icon_cb callback,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_display</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,IndicateListenerIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_server_get_type</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,indicate_listener_get_server_property_cb callback,gpointer data
</FUNCTION>
<FUNCTION>
<NAME>indicate_listener_server_get_desktop</NAME>
<RETURNS>void                  </RETURNS>
IndicateListener * listener,IndicateListenerServer * server,indicate_listener_get_server_property_cb callback,gpointer data
</FUNCTION>
<MACRO>
<NAME>INDICATE_TYPE_SERVER</NAME>
#define INDICATE_TYPE_SERVER (indicate_server_get_type ())
</MACRO>
<MACRO>
<NAME>INDICATE_SERVER</NAME>
#define INDICATE_SERVER(object) (G_TYPE_CHECK_INSTANCE_CAST ((object), INDICATE_TYPE_SERVER, IndicateServer))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_SERVER</NAME>
#define INDICATE_IS_SERVER(object) (G_TYPE_CHECK_INSTANCE_TYPE((object), INDICATE_TYPE_SERVER))
</MACRO>
<MACRO>
<NAME>INDICATE_SERVER_CLASS</NAME>
#define INDICATE_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), INDICATE_TYPE_SERVER, IndicateServerClass))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_SERVER_CLASS</NAME>
#define INDICATE_IS_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), INDICATE_TYPE_SERVER))
</MACRO>
<MACRO>
<NAME>INDICATE_SERVER_GET_CLASS</NAME>
#define INDICATE_SERVER_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS((object), INDICATE_TYPE_SERVER, IndicateServerClass))
</MACRO>
<STRUCT>
<NAME>IndicateServer</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateServer</NAME>
struct _IndicateServer {
	GObject parent;
};

</STRUCT>
<STRUCT>
<NAME>IndicateServerClass</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateServerClass</NAME>
struct _IndicateServerClass {
	GObjectClass parent;

	/* Signals */
	void (* indicator_added) (IndicateServer * server, guint id, gchar * type);
	void (* indicator_removed) (IndicateServer * server, guint id, gchar * type);
	void (* indicator_modified) (IndicateServer * server, guint id, gchar * property);
	void (* server_show) (IndicateServer * server, gchar * type);
	void (* server_hide) (IndicateServer * server, gchar * type);

	/* Virtual Functions */
	gboolean (*get_indicator_count) (IndicateServer * server, guint * count, GError **error);
	gboolean (*get_indicator_count_by_type) (IndicateServer * server, gchar * type, guint * count, GError **error);
	gboolean (*get_indicator_list) (IndicateServer * server, GArray ** indicators, GError ** error);
	gboolean (*get_indicator_list_by_type) (IndicateServer * server, gchar * type, guint ** indicators, GError ** error);
	gboolean (*get_indicator_property) (IndicateServer * server, guint id, gchar * property, gchar ** value, GError **error);
	gboolean (*get_indicator_property_group) (IndicateServer * server, guint id, GPtrArray * properties, gchar *** value, GError **error);
	gboolean (*get_indicator_properties) (IndicateServer * server, guint id, gchar *** properties, GError **error);
	gboolean (*show_indicator_to_user) (IndicateServer * server, guint id, GError ** error);
	guint    (*get_next_id) (IndicateServer * server);
};

</STRUCT>
<FUNCTION>
<NAME>indicate_server_get_type</NAME>
<RETURNS>GType </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_new</NAME>
<RETURNS>IndicateServer *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_set_dbus_object</NAME>
<RETURNS>void </RETURNS>
const gchar * obj
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_set_desktop_file</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server, const gchar * path
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_set_type</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server, const gchar * type
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_show</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_hide</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_next_id</NAME>
<RETURNS>guint </RETURNS>
IndicateServer * server
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_add_indicator</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server, IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_remove_indicator</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server, IndicateIndicator * indicator
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_ref_default</NAME>
<RETURNS>IndicateServer *</RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_set_default</NAME>
<RETURNS>void </RETURNS>
IndicateServer * server
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_count</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, guint * count, GError **error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_count_by_type</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, gchar * type, guint * count, GError **error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_list</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, GArray ** indicators, GError ** error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_list_by_type</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, gchar * type, guint ** indicators, GError ** error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_property</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, guint id, gchar * property, gchar ** value, GError **error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_property_group</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, guint id, GPtrArray * properties, gchar *** value, GError **error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_get_indicator_properties</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, guint id, gchar *** properties, GError **error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_show_indicator_to_user</NAME>
<RETURNS>gboolean </RETURNS>
IndicateServer * server, guint id, GError ** error
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_emit_indicator_added</NAME>
<RETURNS>void </RETURNS>
IndicateServer *server, guint id, const gchar *type
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_emit_indicator_removed</NAME>
<RETURNS>void </RETURNS>
IndicateServer *server, guint id, const gchar *type
</FUNCTION>
<FUNCTION>
<NAME>indicate_server_emit_indicator_modified</NAME>
<RETURNS>void </RETURNS>
IndicateServer *server, guint id, const gchar *property
</FUNCTION>
<MACRO>
<NAME>INDICATE_TYPE_INDICATOR_MESSAGE</NAME>
#define INDICATE_TYPE_INDICATOR_MESSAGE            (indicate_indicator_message_get_type ())
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_MESSAGE</NAME>
#define INDICATE_INDICATOR_MESSAGE(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), INDICATE_TYPE_INDICATOR_MESSAGE, IndicateIndicatorMessage))
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_MESSAGE_CLASS</NAME>
#define INDICATE_INDICATOR_MESSAGE_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), INDICATE_TYPE_INDICATOR_MESSAGE, IndicateIndicatorMessageClass))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_INDICATOR_MESSAGE</NAME>
#define INDICATE_IS_INDICATOR_MESSAGE(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), INDICATE_TYPE_INDICATOR_MESSAGE))
</MACRO>
<MACRO>
<NAME>INDICATE_IS_INDICATOR_MESSAGE_CLASS</NAME>
#define INDICATE_IS_INDICATOR_MESSAGE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), INDICATE_TYPE_INDICATOR_MESSAGE))
</MACRO>
<MACRO>
<NAME>INDICATE_INDICATOR_MESSAGE_GET_CLASS</NAME>
#define INDICATE_INDICATOR_MESSAGE_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), INDICATE_TYPE_INDICATOR_MESSAGE, IndicateIndicatorMessageClass))
</MACRO>
<STRUCT>
<NAME>IndicateIndicatorMessage</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateIndicatorMessageClass</NAME>
</STRUCT>
<STRUCT>
<NAME>IndicateIndicatorMessageClass</NAME>
struct _IndicateIndicatorMessageClass
{
IndicateIndicatorClass parent_class;
};
</STRUCT>
<STRUCT>
<NAME>IndicateIndicatorMessage</NAME>
struct _IndicateIndicatorMessage
{
IndicateIndicator parent;
};
</STRUCT>
<FUNCTION>
<NAME>indicate_indicator_message_get_type</NAME>
<RETURNS>GType </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>indicate_indicator_message_new</NAME>
<RETURNS>IndicateIndicatorMessage *</RETURNS>
void
</FUNCTION>
